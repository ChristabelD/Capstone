{"ast":null,"code":"// Mock user database\nconst mockUsers = [{\n  id: \"1\",\n  email: \"pharmacy@example.com\",\n  password: \"pharmacy123\",\n  // In a real app, never store plain passwords!\n  name: \"Pharmacy Admin\",\n  address: {\n    street: \"123 Medical St\",\n    city: \"Healthville\",\n    state: \"HV\",\n    zip: \"12345\"\n  },\n  phone: \"555-123-4567\"\n}];\nexport const AuthService = {\n  getCurrentUser: () => {\n    const user = localStorage.getItem(\"currentUser\");\n    return user ? JSON.parse(user) : null;\n  },\n  login: async (email, password) => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = mockUsers.find(user => user.email === email && user.password === password);\n    if (!user) {\n      throw new Error(\"Invalid email or password\");\n    }\n\n    // Store user in localStorage\n    localStorage.setItem(\"currentUser\", JSON.stringify(user));\n    return user;\n  },\n  logout: () => {\n    localStorage.removeItem(\"currentUser\");\n  }\n};\n\n// Other services can remain unchanged\nexport const VendorService = {/* ... */};\nexport const MedicationService = {/* ... */};\nexport const OrderService = {/* ... */};","map":{"version":3,"names":["mockUsers","id","email","password","name","address","street","city","state","zip","phone","AuthService","getCurrentUser","user","localStorage","getItem","JSON","parse","login","Promise","resolve","setTimeout","find","Error","setItem","stringify","logout","removeItem","VendorService","MedicationService","OrderService"],"sources":["/Users/christabeladams/capstone/pharmacy-client/src/pages/Login.tsx"],"sourcesContent":["// Mock user database\nconst mockUsers = [\n    {\n      id: \"1\",\n      email: \"pharmacy@example.com\",\n      password: \"pharmacy123\", // In a real app, never store plain passwords!\n      name: \"Pharmacy Admin\",\n      address: {\n        street: \"123 Medical St\",\n        city: \"Healthville\",\n        state: \"HV\",\n        zip: \"12345\"\n      },\n      phone: \"555-123-4567\"\n    }\n  ];\n  \n  export const AuthService = {\n    getCurrentUser: () => {\n      const user = localStorage.getItem(\"currentUser\");\n      return user ? JSON.parse(user) : null;\n    },\n  \n    login: async (email: string, password: string) => {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const user = mockUsers.find(\n        user => user.email === email && user.password === password\n      );\n  \n      if (!user) {\n        throw new Error(\"Invalid email or password\");\n      }\n  \n      // Store user in localStorage\n      localStorage.setItem(\"currentUser\", JSON.stringify(user));\n      return user;\n    },\n  \n    logout: () => {\n      localStorage.removeItem(\"currentUser\");\n    }\n  };\n  \n  // Other services can remain unchanged\n  export const VendorService = { /* ... */ };\n  export const MedicationService = { /* ... */ };\n  export const OrderService = { /* ... */ };"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,CACd;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,sBAAsB;EAC7BC,QAAQ,EAAE,aAAa;EAAE;EACzBC,IAAI,EAAE,gBAAgB;EACtBC,OAAO,EAAE;IACPC,MAAM,EAAE,gBAAgB;IACxBC,IAAI,EAAE,aAAa;IACnBC,KAAK,EAAE,IAAI;IACXC,GAAG,EAAE;EACP,CAAC;EACDC,KAAK,EAAE;AACT,CAAC,CACF;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,OAAOF,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDK,KAAK,EAAE,MAAAA,CAAOhB,KAAa,EAAEC,QAAgB,KAAK;IAChD;IACA,MAAM,IAAIgB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAMP,IAAI,GAAGb,SAAS,CAACsB,IAAI,CACzBT,IAAI,IAAIA,IAAI,CAACX,KAAK,KAAKA,KAAK,IAAIW,IAAI,CAACV,QAAQ,KAAKA,QACpD,CAAC;IAED,IAAI,CAACU,IAAI,EAAE;MACT,MAAM,IAAIU,KAAK,CAAC,2BAA2B,CAAC;IAC9C;;IAEA;IACAT,YAAY,CAACU,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACZ,IAAI,CAAC,CAAC;IACzD,OAAOA,IAAI;EACb,CAAC;EAEDa,MAAM,EAAEA,CAAA,KAAM;IACZZ,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,CAAE,UAAW;AAC1C,OAAO,MAAMC,iBAAiB,GAAG,CAAE,UAAW;AAC9C,OAAO,MAAMC,YAAY,GAAG,CAAE,UAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}